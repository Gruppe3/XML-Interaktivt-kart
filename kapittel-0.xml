<?xml version="1.0" encoding="UTF-8"?>
<kapittel tittel=" General introduction">
	<seksjon tittel="Introduction">
		<p>SIMULA is a general purpose programming language. It inherits the algorithmic properties of ALGOL 60 and introduces methods for structuring data. 
			The main characteristic of SIMULA is that it is easily modelled towards specialized problem areas, and hence can be used as a basis for Special Application Languages.
		</p>
		<p>In this Standard the name SIMULA is considered synonymous with SIMULA 67. Although there exists a predecessor, SIMULA I, this latter language has achieved limited use.
			It is recommended that the language defined in this Standard be referred to as "Standard SIMULA".
		</p>
		<p>SIMULA includes most of the ALGOL 60 language. Wherever ALGOL is used in this Standard it relates to the STANDARD ALGOL 60 definition (ISO 1538).</p>
	</seksjon>
	
	<seksjon tittel="Scope and field of application">
		<p>This Standard establishes the definition of the programming language SIMULA and specifies conformity rules to related products, such as programs and processors.
			Its purpose is to facilitate interchange and promote portability of SIMULA programs between data processing systems.
		</p>
		<p>This Standard specifies:</p>
		<liste indeks="alfa">
			<indeks>The syntax, semantics and representation of SIMULA,</indeks>
			<indeks>Characteristics of processors (see 4.2.1) and their accompanying documents, and of SIMULA programs, required for conformity to this Standard,</indeks>
			<indeks>What is left to the discretion of the implementor, or to be specified for each implementation.</indeks>
		</liste>
		<p>This Standard does not specify:</p>
		<liste indeks="alfa">
			<indeks>Results or issues that are explicitly left undefined or said to be undefined,</indeks>
			<indeks>How non-valid programs are to be rejected and how this will be reported,</indeks>
			<indeks>The relationship of the hypothetical computer, used to explain the actions which constitute the elaboration of a program, to an actual data processing system.</indeks>
		</liste>
	</seksjon>
	
	<seksjon tittel="REFERENCES">
		<p>
			ISO 646-1973: The 7-bit coded character set for information processing interchange.
			ISO 1538-1984: Programming languages - ALGOL 60
			ISO 2022-1982: ISO 7-bit and 8-bit coded character sets
		</p>
		<p>"Common Base Language" by O.-J. Dahl, B. Myhrhaug and K. Nygaard Norwegian Computing Center 1984. (ISBN 82-539-0225-5)</p>
	</seksjon>
	
	<seksjon tittel="DEFINITIONS">
		<p>For the purpose of this Standard the following definitions apply.</p>
		<tabell>
			<rad>
				<kol>Note:</kol>
				<kol>
					Several terms used in this Standard are explained at the appropriate place in Part II (Description of the language). 
					For convenience some of these have been included here too, at times with a simplified definition. 
					It is understood, however, that no difference of meaning is considered to exist, and all definitions of a term are equivalent.
				</kol>
			</rad>
		</tabell>
		
		<avsnitt tittel="SIMULA Program">
		
		<p tittel="Potential program:">
			A text, that is a sequence of characters or typographical marks, meant
			to be a sequence of tokens constituting a SIMULA program.
		</p>
		
		
		<p tittel="Valid program:">
			A potential program that is a program according to the rules in this
			Standard.
		</p>
		
		
		<p tittel="Non-valid program:">
			A potential program that is not a program but can be turned into one
			by deleting or inserting a number of symbols.
		</p>
		
		
		<p tittel="Elaboration of a program:">
			A sequence of actions specified by the semantics to be carried out.
		</p>
	
		
		<p tittel="SIMULA program:">
			A valid program whose elaboration is defined by this Standard for
			an indicated class of input data.
		</p>
		
		</avsnitt>
		
		<avsnitt tittel="SIMULA Processors">
			
				<p tittel="Processor:">
					A compiler, translator or interpreter, in combination with a data
					processing system, that accepts a potential program, transcribed
					in a form that can be processed by that data processing system,
					reports whether the potential program is valid or not, and if so
					requested is able to execute it, if it has not
					rejected it.
				</p>
			
		</avsnitt>
		
		<avsnitt tittel="SIMULA Implementations">
			
			<p tittel="Implementation:">
				A well-documented processor is said to establish an implementation
				of the language SIMULA.
			</p>
			
			
			<p tittel="Implemented language:">
				The version of the language defined by the implementation.
			</p>
			
			
			<p tittel="Extension:">
					A rule in the implemented language that
				
				<liste inedeks="alfa">is not given in this Standard
					<indeks>
						does not cause any ambiguity when added to this Standard
						(but may serve to remove a restriction)
					</indeks>
					<indeks>is within the scope of this Standard.</indeks>
				</liste>
			</p>
			
			<p tittel="Implementation-defined:">
				 What is to be specified for each implementation.
			</p>
			
			
			<p tittel="Implementation-dependent:">
				What is left to the discretion of the implementor.
			</p>
		</avsnitt>
	</seksjon>
	
	<seksjon tittel="CONFORMITY">
		<avsnitt tittel="Requirements">
			<p tittel="Conforming programs">
				Conformity to this Standard requires for a program that
			</p>
			<liste indeks="alfa">
				<indeks>it shall be a SIMULA program</indeks>
				<indeks>a set of input data shall be given for which it has a defined meaning.</indeks>
			</liste>
			<p tittel="Conforming processors">
				Conformity to this Standard requires for a processor that
			</p>
			<liste indeks="alfa">
				<indeks>it shall accept valid programs as being valid,</indeks>
				<indeks>it shall reject non-valid programs as being non-valid,</indeks>
				<indeks>it shall not elaborate a SIMULA program differently from what is defined in this Standard,</indeks>
				<indeks>it shall be accompanied by documents complying with the requirements below.</indeks>
			</liste>
			<p tittel="Documentation">
				It is required for the documents accompanying a conforming processor that these shall
				describe clearly
			</p>
			<liste indeks="alfa">
				<indeks>its purpose, the name of the implemented language, if not SIMULA, and the environment (hardware and software) in which it will work,</indeks>
				<indeks>its intended properties, including</indeks>
				<liste indeks="tegn">
					<indeks>the actions taken when results or issues occur, left undefined in this Standard,</indeks>
					<indeks>conventions for issues said to be implementation-defined,</indeks>
					<indeks>what is provided for issues declared to be implementation dependent,</indeks>
				</liste>
				<indeks>all differences between the implemented language and the language defined in Part II of this Standard,</indeks>
				<indeks>its logical structure,</indeks>
				<indeks>the way to put it into use.</indeks>
			</liste>
			<p tittel="Conforming implementations">
				 A conforming implementation shall comply with the above requirements for a processor
				and its accompanying documents.
			</p>
		</avsnitt>
		
		<avsnitt tittel="Quantitative restrictions">
			<p>
				The requirements specified in 4.1 shall allow for quantitative restrictions to rules
				stated or implied as having no such restriction in this Standard, but only if they are
				fully described in the documents with the implementation. These restrictions are to be
				considered implementation-defined in as far as they are not dependent of any momentary
				resource restraint during execution of a program.
			</p>
		</avsnitt>
		
		<avsnitt tittel="Extensions">
			<p>
				An implementation that allows for extensions in the implemented language is considered
				to conform to this Standard, notwithstanding 4.1 if
			</p>
			<liste indeks="alfa">
				<indeks>it would be conforming when the extensions were omitted,</indeks>
				<indeks>those extensions are clearly described with the implementation,</indeks>
				<indeks>while accepting programs that are non-valid according to the rules
					given in Part II of this Standard, it provides means for indicating
					which part, or parts, of a program would have led to its rejection,
					had no extensions been allowed (cf. Part II, ch. 16),
				</indeks>
				<indeks>the implemented language is a super-language of SIMULA.</indeks>
			</liste>
			<p>
				Extensions are allowed only if the following conditions are fulfilled:
			</p>
			<liste indeks="alfa">
				<indeks>
					The implementor provides a translator program, which takes
					any program accepted by that implementation and translates
					it into a valid program. The resulting program may contain
					a minimum of calls to non-SIMULA procedures in cases where
					this is absolutely necessary due to a lack of facilities
					in the language.
				</indeks>
				<indeks>
					Each implementation has a switch which must be set to make
					the compiler accept programs with extensions.
				</indeks>
			</liste>
			<p> 
				An implementation which allows extensions, shall give
				warning messages for the use of such extensions.
			</p>
			<p>
				Valid programs using extensions shall be described as "conforming
				to the SIMULA Standard but for the following indicated parts".
			</p>
		</avsnitt>
		
		<avsnitt tittel="Subsets">
			<p>This Standard does not include subsets.</p>
		</avsnitt>
	</seksjon>
	
	<seksjon tittel="TESTS">
		<p>
			Whether an implementation is a conforming implementation may possibly be
			detected by a suite of test programs. If there is any uncertainty or doubt
			regarding acceptance of these programs then the conclusion drawn from the
			actual behavior of the processor will prevail over those derived from its
			accompanying documents.
		</p>
	</seksjon>
	
	<seksjon tittel="APPENDICES">
		<p>Appendices contained within this document are not part of this Standard.</p>
	</seksjon>
</kapittel>